"""
vcf_to_23_and_me.py

Converts a VCF file (with rsIDs) into 23andMe-style genotype file.

Usage:
    python vcf_to_23_and_me.py <input.vcf[.gz]> <output.txt>
"""

import sys
import pysam

def convert_to_23andme(input_vcf, output_file):
    vcf_in = pysam.VariantFile(input_vcf)  # open input VCF
    sample = list(vcf_in.header.samples)[0]  # assume only one sample

    # --- Counters for stats ---
    kept = 0
    skipped_no_rsid = 0
    skipped_multialt = 0
    skipped_indel = 0
    skipped_missing_gt = 0

    with open(output_file, "w") as out:
        print(f"[vcf_to_23_and_me]: Writing Header to {output_file}")

        # --- Write OpenVar disclaimer/header ---
        out.write("#OpenVar/vcf_to_23-me raw data export\n")
        out.write("#This file was generated by OpenVar/vcf_to_23-me\n")
        out.write("#Data was derived from your VCF input using the OpenVar pipeline\n")
        out.write("#Data is formatted for compatibility with common consumer genomics formats.\n")
        out.write("#Below is a plain-text representation of your genotype data, created from your \n")
        out.write("#uploaded VCF file.  THIS INFORMATION IS PROVIDED FOR PERSONAL RESEARCH AND \n")
        out.write("#GENEALOGICAL INTEREST ONLY.  IT IS NOT INTENDED FOR MEDICAL, DIAGNOSTIC, \n")
        out.write("#CLINICAL, OR HEALTH PURPOSES.  ONCE EXPORTED, THIS DATA IS NO LONGER \n")
        out.write("#CONTROLLED OR PROTECTED BY OPENVAR.  YOU ARE RESPONSIBLE FOR THE SAFE STORAGE, \n")
        out.write("#SECURITY, AND USE OF THIS FILE.\n")
        out.write("#\n")
        out.write("#Genetic data is listed below in five TAB-delimited columns.  Each row \n")
        out.write("#represents a variant.  Column one is the variant identifier (rsID where \n")
        out.write("#available).  Columns two and three contain the chromosome and genomic position \n")
        out.write("#based on the selected reference build.  Columns four and five report the two \n")
        out.write("#alleles observed at that site (genotype).  Genotypes are provided on the \n")
        out.write("#forward (+) strand relative to the reference genome.\n")
        out.write("#\n")

        # --- Column header line ---
        out.write("# rsid\tchromosome\tposition\tallele1\tallele2\n")

        print(f"[vcf_to_23_and_me]: Writing Variants to {output_file}")
        # --- Iterate through variants ---
        for rec in vcf_in.fetch():
            # Skip variants without rsID
            if not rec.id or rec.id == ".":
                skipped_no_rsid += 1
                continue

            # Skip multi-ALT variants
            if len(rec.alts) != 1:
                skipped_multialt += 1
                continue

            # Skip indels (only keep SNPs = single-base REF and ALT)
            if len(rec.ref) != 1 or len(rec.alts[0]) != 1:
                skipped_indel += 1
                continue

            # Extract genotype for the sample
            gt = rec.samples[sample]["GT"]
            if gt is None:
                skipped_missing_gt += 1
                continue  # skip missing

            # Map 0 -> ref, 1 -> alt
            alleles = []
            for g in gt:
                if g is None:
                    alleles.append("N")
                elif g == 0:
                    alleles.append(rec.ref)
                elif g == 1:
                    alleles.append(rec.alts[0])
                else:
                    alleles.append("N")  # unexpected allele index

            # Write one variant line: rsID, chrom, pos, allele1, allele2
            out.write(f"{rec.id}\t{rec.chrom}\t{rec.pos}\t{alleles[0]}\t{alleles[1]}\n")
            kept += 1

    vcf_in.close()

    # --- Print summary stats ---
    print(f"[vcf_to_23_and_me] Finished: output written to {output_file}")
    print(f"[vcf_to_23_and_me] Variants kept: {kept}")
    print(f"[vcf_to_23_and_me] Skipped (no rsID): {skipped_no_rsid}")
    print(f"[vcf_to_23_and_me] Skipped (multi-ALT): {skipped_multialt}")
    print(f"[vcf_to_23_and_me] Skipped (indels): {skipped_indel}")
    print(f"[vcf_to_23_and_me] Skipped (missing GT): {skipped_missing_gt}")


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python vcf_to_23_and_me.py <input.vcf[.gz]> <output.txt>")
        sys.exit(1)

    input_vcf = sys.argv[1]
    output_file = sys.argv[2]

    convert_to_23andme(input_vcf, output_file)

# <LICENSE>
# Copyright (C) 2016-2025 VariantValidator Contributors
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
# </LICENSE>
